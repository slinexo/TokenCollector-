repeat 
    task.wait() 
until 
    game:IsLoaded() 
    and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("ScreenGui") 
    and game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.LoadingMessage.Visible == false

-- // Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- // Fluent UI
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

local ScriptHive = {}

-------------- // FUNCTIONS // --------------

ScriptHive["humanoidrootpart"] = function()
    return LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
end

local noclipConnection = nil
ScriptHive["noclip"] = function(state)
    if state then
        if not noclipConnection then
            noclipConnection = RunService.Stepped:Connect(function()
                local char = LocalPlayer.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
    end
end

ScriptHive["tween"] = function(speed, pos)
    if ScriptHive.humanoidrootpart() then
        if typeof(pos) == "CFrame" then pos = pos.p end
        local speed = (ScriptHive.humanoidrootpart().Position - pos).Magnitude / speed
        game:GetService("TweenService"):Create(
            ScriptHive.humanoidrootpart(),
            TweenInfo.new(speed, Enum.EasingStyle.Linear),
            {CFrame = CFrame.new(pos)}
        ):Play()
        task.wait(speed)
    end
end

ScriptHive["notify"] = function(title, description, duration)
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = title;
            Text = description;
            Duration = duration;
        })
    end)
end

-------------- // MAIN // --------------

local Window = Library:CreateWindow({
    Title = "Xenus Hub",
    SubTitle = "Token Collector",
    TabWidth = 160,
    Size = UDim2.fromOffset(560, 240),
    Acrylic = true,
    Theme = "Dark"
})

getgenv().ScriptHive = {
    toggles = {
        Activate = false,
    },
    tokens = {
        names = {
            "Ticket",
            "Honey",
            "Royal Jelly",
            "Star Jelly",
            "Snowflake"
        },
        decals = {
            "rbxassetid://1674871631",
            "rbxassetid://1472135114",
            "rbxassetid://1471882621",
            "rbxassetid://2319943273",
            "rbxassetid://6087969886"
        }
    },
    selectedDecals = {},
    tweenspeed = 128
}

local recognizedTokens = setmetatable({}, {__mode = "k"})

local CollectiblesConnection

local isCollecting = false

local function getClosestToken()
    local hrp = ScriptHive.humanoidrootpart()
    if not hrp then return nil end

    local closestDist = math.huge
    local closestChild = nil

    for child in pairs(recognizedTokens) do
        if child and child.Parent then
            local frontDecal = child:FindFirstChild("FrontDecal")
            if frontDecal and frontDecal:IsA("Decal") then
                local distance = (hrp.Position - child.Position).Magnitude
                if distance < closestDist then
                    closestDist = distance
                    closestChild = child
                end
            else
                recognizedTokens[child] = nil
            end
        else
            recognizedTokens[child] = nil
        end
    end

    return closestChild
end

local function CollectTokensLoop()
    isCollecting = true
    while true do
        local child = getClosestToken()
        if not child then 
            break 
        end

        if child.Parent then
            ScriptHive.noclip(true)
            ScriptHive.tween(getgenv().ScriptHive.tweenspeed, child.Position)
            ScriptHive.noclip(false)
            task.wait(0.5)
        end
        recognizedTokens[child] = nil
    end
    isCollecting = false
end

local function TryCollectTokens()
    if not isCollecting then
        CollectTokensLoop()
    end
end

local function ScanForTokens()
    local collectiblesFolder = workspace:FindFirstChild("Collectibles")
    if not collectiblesFolder then return end

    for _, child in ipairs(collectiblesFolder:GetChildren()) do
        if not recognizedTokens[child] then
            local frontDecal = child:FindFirstChild("FrontDecal")
            if frontDecal and frontDecal:IsA("Decal") then
                local itemTexture = frontDecal.Texture
                if table.find(getgenv().ScriptHive.selectedDecals, itemTexture) then
                    recognizedTokens[child] = true
                end
            end
        end
    end
    TryCollectTokens()
end

local function MainFunction()
    if CollectiblesConnection then
        CollectiblesConnection:Disconnect()
        CollectiblesConnection = nil
    end

    local collectiblesFolder = workspace:FindFirstChild("Collectibles")
    if not collectiblesFolder then
        ScriptHive.notify("ScriptHive", "No Collectibles folder found!", 5)
        return
    end

    CollectiblesConnection = collectiblesFolder.ChildAdded:Connect(function(child)
        task.wait(0.1)
        local frontDecal = child:FindFirstChild("FrontDecal")
        if frontDecal and frontDecal:IsA("Decal") then
            local itemTexture = frontDecal.Texture
            if table.find(getgenv().ScriptHive.selectedDecals, itemTexture) then
                recognizedTokens[child] = true
                TryCollectTokens()
            end
        end
    end)
end

-------------- // FLUENT UI // --------------

local Tabs = {
    Main = Window:CreateTab({ Title = "Main", Icon = "lucide-joystick" }),
    Settings = Window:CreateTab({ Title = "Settings", Icon = "lucide-cog" })
}

Tabs.Main:CreateToggle("Activate", {
    Title = "Activate",
    Default = getgenv().ScriptHive.toggles.Activate,
    Callback = function(state)
        getgenv().ScriptHive.toggles.Activate = state
        if state then
            MainFunction()
        else
            table.clear(recognizedTokens)
            if CollectiblesConnection then
                CollectiblesConnection:Disconnect()
                CollectiblesConnection = nil
            end
        end
    end
})

Tabs.Settings:AddSlider("Tween Speed", {
    Title = "Tween Speed",
    Min = 10,
    Max = 250,
    Rounding = 10,
    Default = getgenv().ScriptHive.tweenspeed,
    Callback = function(value)
        getgenv().ScriptHive.tweenspeed = value
        print("New Tween Speed:", value)
    end
})

Tabs.Main:CreateDropdown("Dropdown", {
    Title = "Tokens",
    Values = getgenv().ScriptHive.tokens.names,
    Multi = true,
    Default = {},
    Callback = function(selectedTable)
        table.clear(getgenv().ScriptHive.selectedDecals)
        
        for name, isSelected in pairs(selectedTable) do
            if isSelected then
                local index = table.find(getgenv().ScriptHive.tokens.names, name)
                if index then
                    local decal = getgenv().ScriptHive.tokens.decals[index]
                    print(("Selected: %s => %s"):format(name, decal))
                    table.insert(getgenv().ScriptHive.selectedDecals, decal)
                end
            end
        end

        if getgenv().ScriptHive.toggles.Activate then
            table.clear(recognizedTokens)
        end
    end
})
